#version 400 core

in vec2 pass_texCoords;
in vec3 surfaceNormal;
in vec3 toLight[4];
in vec3 toCamera;
in float visibility;

out vec4 out_colour;

uniform sampler2D bgTex;
uniform sampler2D rTex;
uniform sampler2D gTex;
uniform sampler2D bTex;
uniform sampler2D blendMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

    vec4 blendMapColour = texture(blendMap, pass_texCoords);

    float backTexAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoords = pass_texCoords * 40.0;
    vec4 bgTexColour = texture(bgTex, tiledCoords) * backTexAmount;
    vec4 rTexC = texture(rTex, tiledCoords) * blendMapColour.r;
    vec4 gTexC = texture(gTex, tiledCoords) * blendMapColour.g;
    vec4 bTexC = texture(bTex, tiledCoords) * blendMapColour.b;

    vec4 totalColour = bgTexColour + rTexC + gTexC + bTexC;

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitToCam = normalize(toCamera);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for(int i = 0; i < 4; i++) {
        float distance = length(toLight[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitToLight = normalize(toLight[i]);

        float nDotl = dot(unitNormal, unitToLight);
        float brightness = max(nDotl, 0.0);
        vec3 lightDir = -unitToLight;
        vec3 reflectedLightDir = reflect(lightDir, unitNormal);

        float specularFactor = dot(reflectedLightDir, unitToCam);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse += totalDiffuse + (brightness * lightColour[i]) / attFactor;
        totalSpecular += totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
    }

    totalDiffuse = max(totalDiffuse, 0.2);


    out_colour = vec4(totalDiffuse, 1.0) * totalColour + vec4(totalSpecular, 1.0);
    out_colour = mix(vec4(skyColour, 1.0), out_colour, visibility);
}